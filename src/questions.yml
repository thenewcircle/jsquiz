# YAML question input. There are two kinds of questions, each documented below.
#
# ---------------
# type = "choice"
# ---------------
#
# This is a multiple choice question. The following fields are required:
#
# question: The text of the question. Embedded HTML is permitted. Multiline
#           values should use the YAML ">" (folded) or "|" (literal) style.
#           See http://michael.f1337.us/2010/03/30/482836205/
# type:     "choice"
# answers:  A list of answers. Each answer must have two fields:
#
#           answer: The answer (choice) to display to the user.
#           correct: true if it's the correct answer; false otherwise.
#
# ---------------
# type = "jscode"
# ---------------
#
# This is a question that requires the student to enter some Javascript code
# to be evaluated. The following fields are required.
#
# question:       The text of the question. Embedded HTML is permitted. Multiline
#                 values should use the YAML ">" (folded) or "|" (literal) style.
#                 See http://michael.f1337.us/2010/03/30/482836205/
# type:           "jscode"
# wrapper:        Wrapper JavaScript code. The user's code will be inserted
#                 into the wrapper, replacing a special token. (You need to
#                 include the token in the wrapper *AND* specify the token in
#                 the "token" field.) The wrapper will be executed by the quiz
#                 driver, and its result will be tested against the
#                 "expectedAnswer" field. Here's an example:
#
#                 wrapper: |
#                   (function() {
#                     var userFunc = @obj@;
#                     return userFunc(10) == 100;
#                   })();
#
#                 This example wrapper returns true or false; "expectedAnswer"
#                 must be one of those values. The token string is "@obj@", so
#                 "token" must be set to that value.
# token:          The token that will be replaced with the student's code.
# expectedAnswer: The answer expected to be returned from the wrapper.
# correctCode:    A code snippet representing what the answer *SHOULD* be,
#                 for display.

questions:

  - question: "Which of the following represents a valid JavaScript comment?"
    type: "choice"
    answers:
    - answer:  "<code>-- This is a comment</code>"
      correct: false
    - answer:  "<code># This is a comment</code>"
      correct: false
    - answer:  "<code>// This is a comment</code>"
      correct: true
    - answer:  "<code>** This is a comment **</code>"
      correct: false

  - question: |
      How do you create a variable <code>s</code> that is set to the string
      "Angular"?
    type: "choice"
    answers:
    - answer:  "<code>String s = \"Hello\";</code>"
      correct: false
    - answer:  "<code>string s = \"Hello\";</code>"
      correct: false
    - answer:  "<code>var s = \"Hello\";</code>"
      correct: true
    - answer:  "<code>s = \"Hello\";</code>"
      correct: false

  - question: "What is the keyword to define a function?"
    type: "choice"
    answers:
    - answer:  "<code>def</code>"
      correct: false
    - answer:  "<code>func</code>"
      correct: false
    - answer:  "<code>public</code>"
      correct: false
    - answer:  "<code>function</code>"
      correct: true
    - answer:  "None of the above"
      correct: false

  - question: "What two statements can you use to handle errors?"
    type: "choice"
    answers:
    - answer:  "<code>try/catch</code>"
      correct: true
    - answer:  "<code>try/except</code>"
      correct: false
    - answer:  "<code>begin/rescue</code>"
      correct: false
    - answer:  "None of the above"
      correct: false

  - question: |
      If you have a string variable, <code>s</code>, how do you determine its
      length?
    type: "choice"
    answers:
    - answer:  "<code>length(s)</code>"
      correct: false
    - answer:  "<code>len(s)<code>"
      correct: false
    - answer:  "<code>s.length</code>"
      correct: true
    - answer:  "<code>s.size</code>"
      correct: false

  - question: |
      How do you convert a string, <code>s</code>, to lower case?"
    type: "choice"
    answers:
    - answer:  "<code>s.lower()</code>"
      correct: false
    - answer:  "<code>s.toLowerCase()<code>"
      correct: true
    - answer:  "<code>s.toLower</code>"
      correct: false
    - answer:  "<code>s.toLower()</code>"
      correct: false
    - answer:  "<code>s.lowerCase()</code>"
      correct: false

  - question: |
      Create an anonymous object literal (not assigned to a variable), with
      three fields, <code>x</code>, <code>y</code> and <code>str</code>.<br/>
      Initialize <code>x</code> to the integer 1.<br/>
      Initialize <code>y</code> to the floating point number 2.0.<br/>
      Initialize <code>str</code> to "Hello".
    type: "jscode"
    token: "@obj@"
    # The code compares the result of the wrapper call against "answer".
    wrapper: |
      (function() {
        var o = @obj@;
        return (o.x === 1) && (o.y === 2.0) && (o.str === 'Hello');
      })()
    expectedAnswer: true
    correctCode: |
      { x:   1,
        y:   2.0,
        str: "Hello" }

  - question: |
      Write a function named <code>add</code> that adds two arguments.
    type: "jscode"
    token: "@add@"
    # The code compares the result of the wrapper call against "answer".
    wrapper: |
      (function() {
        @add@;
        return add(10, 20);
      })()
    expectedAnswer: 30
    correctCode: |
      function(a, b) {
        return a + b;
      }

  - question: >
      If you refer to a variable that hasn't been declared, what will its
      value be?
    type: "choice"
    answers:
    - answer:  "<code>null</code>"
      correct: false
    - answer:  "<code>undefined</code>"
      correct: true
    - answer:  "<code>0</code>"
      correct: false
    - answer:  "<code>\"\"</code>"
      correct: false

  - question: >
      In the following code, will the code within the <code>if</code> statement
      execute?
      <pre>var x = "";

      if (x) {
        callSomeFunction(x);
      }
      </pre>
    type: "choice"
    answers:
    - answer:  "yes"
      correct: false
    - answer:  "no"
      correct: true

  - question: |
      What will the following code print?
      <pre>var i = 0;

      if (i) i++;

      console.log(i);</pre>
    type: "choice"
    answers:
    - answer:  "Nothing."
      correct: false
    - answer:  "0"
      correct: true
    - answer:  "1"
      correct: false

  - question: "Is JavaScript case-sensitive or case-insensitive?"
    type: "choice"
    answers:
    - answer:  "case-sensitive"
      correct: true
    - answer:  "case-insensitive"
      correct: false

  - question: |
      What does the following function do?
      <pre>function callMe(v) {
        return v ? 1 : 2;
      }</pre>
    type: "choice"
    answers:
    - answer:  "It returns the value in <code>v</code>."
      correct: false
    - answer:  "It always returns 2."
      correct: false
    - answer:  "It returns 1 if <code>v</code> is truthy. Otherwise, it returns 2."
      correct: true

    question: |
      What does the following function do?

      <pre>function figureThisOut(str) {
        return str.split('').reverse().join('');
      }</pre>
    type: "choice"
    answers:
    - answer:  "Returns the same string that was passed in."
      correct: false
    - answer:  "If a string is passed, returns a reversed copy."
      correct: true
    - answer:  "Splits the string into an array of characters and returns the array."
      correct: false

    question: |
      What does the array contain after the following code finishes executing?

      <pre>var a = [];
      a.push('a');
      a.push('b');
      a.pop();
      a.push('c');
      a.push('d');
      a.pop();
      a.push('e');</pre>
    type: "choice"
    answers:
    - answer:  "<code>['a', 'b', 'c', 'd', 'e']</code>"
      correct: false
    - answer:  "<code>['a', 'b', 'e']</code>"
      correct: false
    - answer:  "<code>['e']</code>"
      correct: false
    - answer:  "<code>['a', 'c', 'e']</code>"
      correct: true

  - question: |
      Write a single JavaScript statement that will concatenate two strings,
      one in variable <code>s1</code> and the other in variable
      <code>s2</code>, storing the result in a third variable <code>s3</code>.
      You must declare <code>s3</code>.
    type: "jscode"
    token: "@code@"
    # The code compares the result of the wrapper call against "answer".
    wrapper: |
      (function() {
        var s1 = "abc";
        var s2 = "def";
        @code@
        return (s3 === "abcdef");
      })()
    expectedAnswer: true
    correctCode: "var s3 = s1 + s2;"

  - question: |
      In the following code, what will <code>value</code> contain?
      <pre>
      var x = 3;
      var value = x + 2 + '1';</pre>
    type: "choice"
    answers:
    - answer:  "<code>6</code>"
      correct: false
    - answer:  "<code>undefined</code>"
      correct: false
    - answer:  "<code>'51'</code>"
      correct: true
    - answer: "Nothing. The assignment to <code>value</code> will throw an error."
      correct: false

  - question: |
      What does this statement do?
      <pre>var x = parseInt("FF");</pre>
    type: "choice"
    answers:
    - answer:  "Sets <code>x</code> to <code>undefined</code>."
      correct: false
    - answer:  "Sets <code>x</code> to 255."
      correct: false
    - answer:  "Sets <code>x</code> to <code>NaN</code>."
      correct: true
    - answer:  "It throws an error."
      correct: false

  - question: |
      AngularJS makes heavy use of closures and functions that return
      other functions. So, write a JavaScript function called
      <code>makeMultiplier()</code>. This function must take a single numeric
      argument representing a multiplier. It must return <i>another</i>
      function that takes a numeric argument and returns that number
      multiplied by the multiplier. Here's how it might be used:
      <pre>var multBy2 = makeMultiplier(2);
      var x = multBy2(20);  // x will be 40
      var y = multBy2(30);  // y will be 60
      makeMultiplier(5)(10) // returns 50</pre>
    type: "jscode"
    token: "@code@"
    # The code compares the result of the wrapper call against "answer".
    wrapper: |
      (function() {
        @code@
        var multBy3 = makeMultiplier(3);
        var multBy10 = makeMultiplier(10);
        var x = multBy3(9);
        var y = multBy10(23);
        return (x === 27) && (y == 230);
      })()
    expectedAnswer: true
    correctCode: |
      function makeMultiplier(multiplier) {
        return function(n) {
          return n * multiplier;
        }
      }

  - question: |
      Here's another closure question. This one is tricky.<br/><br/>
      Write a function called <code>newCounter()</code>. It must return
      a function that increments a hidden inner counter (initialized to 0),
      returning the new value. Here's an example of its use:
      <pre>var c1 = newCounter();
      console.log(c1()); // prints 1
      console.log(c1()); // prints 2
      console.log(c1()); // prints 3
      var c2 = newCounter();
      console.log(c2()); // prints 1
      console.log(c2()); // prints 2
      console.log(c1()); // prints 4
      </pre>
    type: 'jscode'
    token: '@code@'
    wrapper: |
      (function() {
        @code@
        var c1 = newCounter();
        c1();
        var r1 = c1();
        var c2 = newCounter();
        c2();
        c2();
        var r2 = c2();
        return (r1 === 2) && (r2 === 3);
      })()
    expectedAnswer: true
    correctCode: |
      function newCounter() {
        var n = 0;
        return function() {
          return ++n;
        }
      }

  - question: |
      What are the values of Expression 1 and Expression 2, below?
      <pre>var obj = { a: 100 };

      obj.a;    // Expression 1
      obj['a']; // Expression 2
      </pre>
    type: "choice"
    answers:
    - answer:  |
        Expression 1 has the value 100. Expression 2 has the value
        <code>undefined</code>, because <code>obj</code> isn't an array.
      correct: false
    - answer:  |
        Expression 1 has the value 100. Expression 2 throws an error.
      correct: false
    - answer:  |
        Expression 1 and Expression 2 have the same value; they're just
        two different ways to access fields in an object.
      correct: true

  - question: |
      What does the following code print?
      <pre>function Person(firstName, lastName) {
        this.firstName = firstName;
        this.lastName  = lastName;

        this.toString = function() {
          return firstName + " " + lastName;
        }
      }

      var p = new Person("John", "Smith");
      console.log(p.toString());
      </pre>
    type: "choice"
    answers:
    - answer:  "It doesn't print anything. JavaScript isn't Java!"
      correct: false
    - answer:  >
        It prints "John Smith". Functions can be used as object constructors
        in Javascript.
      correct: true
    - answer: |
        It throws an error on the <code>new Person("John", "Smith")</code>
        statement.
      correct: false

  - question: |
      In an HTML page, what tag do you use to pull in external JavaScript?
    type: 'choice'
    answers:
    - answer: |
        <code>&lt;javascript src="..."&gt;&lt;/javascript&gt;
      correct: false
    - answer: |
        <code>&lt;link src="..." type="javascript"&gt;&lt;/link&gt;
      correct: false
    - answer: |
        <code>&lt;script src="..."&gt;&lt;/script&gt;
      correct: true

  - question: |
      AngularJS is built on top of jQuery. It's useful to know some jQuery
      basics when writing certain kinds of Angular code. The next few questions
      are jQuery-specific.
      <br/><br/>
      Using jQuery, how can you select an HTML element with ID "heading"?
    type: "choice"
    answers:
    - answer:  "<code>$('heading')</code>"
      correct: false
    - answer:  "<code>$('id=heading')</code>"
      correct: false
    - answer:  "<code>$(id: 'heading')</code>"
      correct: false
    - answer:  "<code>$('#heading')</code>"
      correct: true
    - answer:  "None of the above"
      correct: false

  - question: |
      Given this HTML element:
      <pre>&lt;div id="elem1"&gt;&lt;/div&gt;</pre>
      How would you set the element's content to the string
      "Welcome to my site."?
    type: "choice"
    answers:
    - answer:  |
        <code>$("#elem1").write("Welcome to my site.");</code>
      correct: false
    - answer:  |
        <code>$("#elem1") += "Welcome to my site.";</code>
      correct: false
    - answer:  |
        <code>$("#elem1").text("Welcome to my site.");</code>
      correct: true

  - question: |
      What does this statement do?
      <pre>$('.link').addClass('button')</pre>
    type: "choice"
    answers:
    - answer: >
        Selects the <b>first</b> element in the document that has the CSS class
        "link" and <b>adds</b> "button" to its list of CSS classes.
      correct: false
    - answer: |
        Selects the <b>first</b> element in the document that has the CSS class
        "link" and <b>replaces</b> its CSS classes with "button".
      correct: false
    - answer: |
        Selects <b>all</b> elements in the document that has the CSS class
        "link" and <b>adds</b> "button" to their lists of CSS classes.
      correct: true
    - answer: |
        Selects <b>all</b> elements in the document that has the CSS class
        "link" and <b>replaces</b> their CSS classes with "button".
      correct: false

  - question: |
      Given these HTML elements:
      <pre>&lt;div id="container1"&gt;
        &lt;span class="span1"&gt;&lt;/span&gt;
        &lt;span class="span2"&gt;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div id="container2"&gt;
        &lt;span class="span1"&gt;&lt;/span&gt;
        &lt;span class="span2"&gt;&lt;/span&gt;
        &lt;div class="inner-container"&gt;
          &lt;span class="span2"&gt;&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      </pre>
      What's the easiest way to use jQuery to select the second
      <code>&lt;span&gt;</code> element in "container2", <i>without</i>
      selecting the one in "container1" or the one in "inner-container"?
    type: "choice"
    answers:
    - answer: |
        <code>$(".span2")</code>
      correct: false
    - answer: |
        <code>$("#container2")[".span2"]</code>
      correct: false
    - answer: |
        <code>$("#container2").find(".span2")</code>
      correct: false
    - answer: |
        <code>$("#container2").children(".span2")</code>
      correct: true
